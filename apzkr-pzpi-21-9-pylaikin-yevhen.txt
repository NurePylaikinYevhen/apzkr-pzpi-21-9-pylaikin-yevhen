Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Факультет комп’ютерних наук

Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для контролю впливу мікроклімату офісу на активність робітників

Студент гр. ПЗПІ-21-9		 __________________ Пилайкін Є. О.
(підпис)
Керівник роботи 			___________________ ст.викл. Сокорчук І.П.
(підпис) 
Роботу захищено «__»_________2024 р.
з оцінкою _________________________ 

Комісія: 				___________________ доц. Лещинський В.О. 
(підпис)
___________________ доц. Лещинська І.О. 
(підпис)
___________________ ст.викл. Сокорчук І.П.
(підпис)


Харків
2024 р.
Харківський національний університет радіоелектроніки 

Факультет комп’ютерних наук Кафедра програмної інженерії	
Спеціальність 121 – Інженерія програмного забезпечення		
Курс                     3                     Семестр 	                  6 		
Навчальна дисципліна Архітектура програмного забезпечення	

ЗАВДАННЯ 
НА КУРСОВУ РОБОТИ СТУДЕНТОВІ  
                                  Пилайкіну Євгену Олександровичу				
1. Тема проекту: Програмна система для контролю впливу мікроклімату офісу на активність робітників
2. Термін узгодження завдання з лабораторних робіт «_18_»_березня_ 2024 р.
3. Термін здачі завдання з лабораторних робіт «   06    »      червня     2024 р.  
4. Вихідні дані до проекту: В програмній системі передбачити: розробку інтегрованої системи моніторингу та оптимізації мікроклімату для підвищення продуктивності праці. Система включає розміщення IoT-пристроїв у робочих приміщеннях, інтеграцію мережі сенсорів та оцінкою продуктивності, моніторинг параметрів мікроклімату, які впливають на продуктивність, модуль генерації рекомендацій для оптимізації умов. Використовувати технології: ОС Linux та Docker, CУБД PostgreSQL, PyCharm IDE, React (frontend), FastAPI (backend), Python (IoT-симуляція)
5. Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): вступ, аналіз предметної області, постановка задачі, проектування програмного проекту, структура бази даних, кодування програмного проекту, опис розробленої програмної системи, висновки, перелік посилань, додатки
6. Перелік графічного матеріалу (діаграми, рисунки, інтерфейси): 
схема бази даних, діаграма варіантів використання, діаграма розгортання, діаграма прецедентів, ER-модель даних, діаграма компонентів.
 
КАЛЕНДАРНИЙ ПЛАН

№	Назва етапів курсової роботи	Термін виконання
етапів	Примітка
1	Функціональна специфікація 
програмного проекту	18.04.24	Виконано
2	Проектування програмного 
проекту	25.04.24 - 29.04.24	Виконано
3	Кодування програмного проекту	02.05.24 - 16.05.24	Виконано
4	Оформлення пояснювальної 
записки	18.05.24 - 26.05.24	Виконано
5	Захист курсової роботи	30.06.24	Виконано

Дата видачі теми проекту «__18__»____ березня____2024 р.  
Керівник 				 ______________ ст.викл. Сокорчук І.П.
(підпис)  
Завдання прийняв до виконання 
ст.гр. ПЗПІ-21-9			 _____________		_Пилайкін Є. О._ 
         (підпис)
 
РЕФЕРАТ


Пояснювальна записка до курсової роботи: 63 с., 23 рис., 2 табл., 2 додатки, 5 джерел.
МІКРОКЛІМАТ, ОФІС, ДАТЧИКИ, ПРОДУКТИВНІСТЬ, АВТОМАТИЗАЦІЯ.
Об'єктом дослідження є офісне середовище та фактори, що впливають на комфорт і продуктивність працівників. Метою проєкту є розробка програмної системи для моніторингу та контролю параметрів мікроклімату в офісному просторі.
Методологія розробки базується на використанні наступних технологій: мікроконтролер ESP32, датчики температури, вологості та рівня CO2, FastAPI для створення серверної частини, база даних для зберігання історичних даних, React для розробки користувацького інтерфейсу.
Програмна система дозволяє підключати різні датчики до ESP32, який зчитує дані про параметри мікроклімату. Ця інформація передається на сервер, де зберігається в базі даних для подальшого аналізу. Веб-інтерфейс, розроблений на React, дозволяє користувачам у реальному часі відстежувати стан мікроклімату та налаштовувати параметри автоматичного регулювання.
При відхиленні параметрів мікроклімату від заданих оптимальних значень система автоматично активує відповідні системи для корекції умов. Після нормалізації показників система продовжує моніторинг і за необхідності коригує роботу кліматичного обладнання.
Така програмна система дозволяє автоматизувати процес підтримки оптимального мікроклімату в офісі, що сприяє підвищенню комфорту та продуктивності працівників. 
 
ЗМІСТ


ВСТУП	7
1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ	9
1.1	Бізнес-вимоги	9
1.1.1	Бізнес можливості	9
1.1.2	Бізнес-цілі та критерії успіху	10
1.1.3	Потреби клієнтів або ринку	11
1.1.4	Бізнес-ризики	12
1.2	Концепція рішення	14
1.2.1	Окреслення концепції	14
1.2.2	Головна функціональність	15
1.2.3	Припущення та залежності	15
1.3	Рамки та обмеження проєкту	16
1.3.1	Рамки первинного випуску	16
1.3.2	Рамки наступних випусків	18
1.3.3	Обмеження та винятки	18
1.4	Бізнес-контекст	20
1.4.1	Профілі зацікавлених сторін	20
1.4.2	Пріоритети проекту	21
1.4.3	Робоче середовище	22
2	ПОСТАНОВКА ЗАДАЧІ	24
3	ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЕКТУ	26
3.1	Проектування серверної частини проекту	26
3.2	Проектування IoT-частини системи	29
3.3	Проектування клієнтської частини проекту	30
4	РЕАЛІЗАЦІЯ ПРОГРАМНОЇ СИСТЕМИ	40
4.1 Архітектура та розробка серверної частини	40
4.1.1	Розробка API для керування кімнатами	44
4.1.2	Розробка API для управління пристроями системи	45
4.1.3	Розробка API для керування конфігураціями пристроїв	45
4.2 Архітектура та розробка IoT частини	46
4.3 Архітектура та розробка web частини	48
ВИСНОВКИ	52
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ	54
ДОДАТОК А	55
ДОДАТОК Б	61


 
ВСТУП


У сучасному суспільстві багато людей проводять велику частину часу, працюю чи в офісах, користуючись комп’ютером або виконуючи інші завдання. Внутрішнє середовище в офісі, включаючи такі фактори, як температура, вологість, якість повітря та освітлення, може значно впливати на здоров’я, працездатність і продуктивність працівників.
Погані умови мікроклімату можуть призвести до зниження концентрації уваги, втоми, примхливого настрою, головного болю та інших несприятливих наслідків, що призводить до зниження продуктивності та загальної активності співробітників. Ідеальні налаштування мікроклімату допомагають створити комфортне робоче середовище, підвищити продуктивність і підвищити задоволеність працівників.
Моніторинг і управління мікрокліматом підвищують максимальну продуктивность співробітників їх загальне самопочуття та стан здоров’я. Наймання відповідальних осіб, що будуть стежити за усіма факторами є набагато ресурсозатратніше і вимагатиме додаткового обладнання та фізичних витрат.
Таким чином, є вимоги створити програмну систему, яка буде пов’язана з пристроями, встановленими перед кожним робочим місцем. Ці пристрої контролюють такі фактори мікроклімату, як температура, вологість, рівень газу, тиск та інші показники за допомогою відповідних датчиків.
Система аналізуватиме та порівнюватиме зібрані дані про поведінку працівників і показники мікроклімату в офісі. Використовуючи алгоритми машинного навчання, можна визначити найкращі діапазони кліматичних параметрів, які розраховуються системою індивідуально для кожного працівника окремо, з ціллю підвищення їх максимальної продуктивності.
Основною метою проекту є розробка інтелектуальної системи, яка автоматично збиратиме, досліджуватиме та покращуватиме середовище в офісі для підвищення продуктивності та залученості працівників.
 
1	АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
1.1	Бізнес-вимоги
1.1.1	Бізнес можливості

Програмна система для управління впливом офісного мікроклімату на продуктивність співробітників є новим на ринку і має безліч шляхів для розвитку в бізнес перспективі.
На даний момент, даних систем доволі мало, зі списку таких систем, справді корисні можна перечислити на пальцях однієї руки. Дані системи реалізовані у вигляді групи з інших систем, кожна з яких виконує свою роботу. Наприклад, системи моніторингу якості повітря в приміщеннях відстежують рівень вуглекислого газу, частинок пилу та інших забруднюючих речовин. Крім того, є спеціальні датчики для вимірювання температури, вологості та освітлення (https://www.enlightedinc.com/). Є також один з проектів, який спеціалізується на покращеннях умов на робочому місці (https://spacewell.com/solutions/workplace-solutions/workplace-experience/). Ця система містить мобільний додаток, що допомогає краще орієнтуватися в офісі, дуже легко знаходити колег та відстежувати якість повітря.
Програмна система для контролю впливу мікроклімату офісу на активність робітників матиме ряд переваг над існуючими рішеннями. По-перше, вона буде комплексно відстежувати всі ключові параметри мікроклімату та активність робітників в одній інтегрованій системі. По-друге, завдяки математичним алгоритмам матиме змогу виявляти індивідуальні оптимальні умови для кожного співробітника та динамічно підлаштовувати параметри середовища під кожного співробітника окремо. По-третє, система зможе надавати рекомендації або автоматично регулювати мікроклімат відштовхуючись від інформації, що зібрала система з конкретного співробітника.
Модель монетизації такого продукту може бути різною. Одним із варіантів є продаж ліцензій на використання програмного забезпечення для офісних центрів, великих компаній або окремих організацій. Альтернативою може бути підписка на програму як послугу (SaaS), де клієнти платять щомісячну або річну плату за користування системою. Кожен смарт девайс буде мати свій власний прайс ліст. Після покупки даного смарт девайсу, компанії, яка придбала даний смарт девайс, надаються послуги безкоштовного встановлення даних смарт девайсів, безпосередньо, в офіс та стартове налаштування системи
Цільовим ринком для даного програмного продукту є офісні приміщення, коворкінг-центри, IT-компанії, консалтингові фірми та інші організації, де продуктивність праці співробітників є критично важливою. З огляду на зростаючу увагу до питань здоров'я та комфорту на робочому місці, а також прагнення максимізувати ефективність роботи персоналу, така система може стати революціонною на ринку за рахунок того, що аналізуючи співробітників та їх середню активність підлаштовує температуру, вологість повітря та інші чинники під співробітника для його більш комфортного перебування в приміщенні та підвищення цими діями його максимальної продуктивності.
Ще однією можливістю є партнерство з виробниками офісного обладнання та систем кондиціонування для інтеграції програмного продукту в їхні рішення. Це дозволить пропонувати комплексні інтелектуальні системи управління мікрокліматом в офісах.

1.1.2	Бізнес-цілі та критерії успіху


Бізнес-цілі даного проекту:
BO-1: Досягнути рентабельності та окупності інвестицій у розробку програмної системи протягом 2-3 років після запуску.
BO-2: Забезпечити підприємствам можливість підвищити продуктивність персоналу на 10-15% завдяки оптимізації умов мікроклімату в офісі.
BO-3: Налагодити партнерські відносини з виробниками офісного обладнання та систем кондиціонування для інтеграції програмного продукту в їхні рішення.

Критерії успіху даного проекту:


SC-1: Залучити перших корпоративних клієнтів та досягти бази користувачів у кілька тисяч протягом перших 12 місяців після запуску.
SC-2: Стати визнаним лідером на ринку систем оптимізації мікроклімату для підвищення продуктивності праці протягом 5-6 років.
SC-3: Забезпечити зниження витрат корпоративних клієнтів на створення комфортних умов праці на 8-12% за рахунок автоматизації та оптимізації систем управління мікрокліматом.
SC-4: Досягти високого рівня задоволеності користувачів, підтвердженого позитивними відгуками та високими оцінками (вище 4 з 5).


1.1.3	Потреби клієнтів або ринку


Виділимо основні потреби користувачів, як співробітників:


- Забезпечити комфортні та оптимальні умови праці, які сприятимуть підвищенню продуктивності та зменшенню втоми та роздратованості.
- Мати можливість індивідуального налаштування параметрів мікроклімату відповідно до персональних преференцій.
- Отримувати зворотний зв'язок та рекомендації щодо покращення умов праці на основі даних про активність та показники мікроклімату.
- Уникати негативного впливу несприятливих факторів мікроклімату, таких як низька якість повітря, висока/низька температура чи вологість тощо.


Основні потреби корпорацій та організацій:


- Підвищити продуктивність та ефективність роботи персоналу за рахунок оптимізації умов мікроклімату.
- Знизити витрати на створення комфортного робочого середовища шляхом автоматизації процесів управління мікрокліматом.
- Отримувати аналітичні дані та звіти про вплив параметрів мікроклімату на активність співробітників для прийняття управлінських рішень.
- Створити позитивний імідж компанії, що дбає про добробут та здоров'я своїх працівників.
- Забезпечити відповідність вимогам норм та стандартів щодо умов праці в офісних приміщеннях.

1.1.4	Бізнес-ризики
Основні бізнес-ризики, які можуть виникнути при розробці та впровадженні програмної системи для контролю впливу мікроклімату на активність робітників:
 
- Фінансові ризики, пов'язані з високою вартістю розробки та інтеграції системи з різними датчиками та обладнанням для моніторингу мікроклімату. Ступінь ризику: середній. Методами мінімізації є ретельне планування бюджету, пошук інвесторів та партнерів.
- Ризики невідповідності стандартам та нормативам щодо умов праці та екологічним вимогам. Ступінь ризику: середній. Вирішується шляхом ретельного дослідження відповідних стандартів та тісної співпраці з експертами в галузі охорони праці.
- Ризики недостатнього попиту на ринку через низьку обізнаність клієнтів про переваги системи. Ступінь ризику: високий. Методами боротьби є проведення ефективної маркетингової кампанії, демонстрація результатів пілотних проектів та надання переконливих доказів ефективності рішення.
- Ризики конкуренції з боку існуючих рішень або нових гравців на ринку. Ступінь ризику: середній. Вирішується за допомогою постійного вдосконалення продукту, впровадження інновацій та забезпечення високої якості обслуговування клієнтів.
 
1.2	Концепція рішення
1.2.1	Окреслення концепції


Метою проекту є створення інноваційної програмної системи для контролю впливу мікроклімату офісу на активність робітників. Наша цільова аудиторія включає керівників офісів, менеджерів з управління персоналом, відділи охорони праці, а також самих співробітників.
Впровадження даної програмної системи дозволить організаціям перейти від ручного контролю параметрів мікроклімату до автоматизованої та інтелектуальної системи оптимізації умов праці. Процеси моніторингу температури, вологості, якості повітря, освітлення та інших факторів стануть централізованими та точними, що сприятиме підвищенню продуктивності персоналу та економії ресурсів на створення комфортного робочого середовища.
Функціонал програмної системи дозволить автоматично відстежувати показники мікроклімату в режимі реального часу, аналізувати їх вплив на активність працівників за допомогою машинного навчання та динамічно підлаштовувати умови відповідно до виявлених оптимальних параметрів. Це дозволить мінімізувати негативні чинники, такі як втома, роздратованість чи погана концентрація, викликані незадовільним або некомфортним для працівників мікрокліматом.
Для керівництва компаній система забезпечить доступ до аналітичних даних та рекомендацій щодо оптимізації умов праці, що допоможе приймати обґрунтовані рішення у програмній системі та раціонально використовувати ресурси компанії. У середовищі в якому працюють співробітники будуть налаштовані кращі та більш сприятливі умови праці для комфортного місцезнаходження та роботи співробітників, що позитивно позначиться на їхньому здоров'ї, продуктивності та задоволеності роботою. 
1.2.2	Головна функціональність


Виділимо основну функціональність програмної системи контролю впливу мікроклімату на активність робітників:
MF-1: Моніторинг параметрів мікроклімату (температура, вологість, рівень CO2, тиск тощо) в режимі реального часу за допомогою інтегрованих датчиків.
MF-2: Відстеження активності робітників за допомогою датчиків руху та присутності.
MF-3: Аналіз взаємозв'язку між параметрами мікроклімату та активністю працівників за допомогою алгоритмів машинного навчання.
MF-4: Виявлення оптимальних діапазонів параметрів мікроклімату для максимальної продуктивності кожного співробітника.
MF-5: Динамічне регулювання та оптимізація параметрів мікроклімату (температура, вентиляція, освітлення) відповідно до виявлених оптимумів.
MF-6: Генерування рекомендацій для керівництва щодо покращення умов праці на основі аналізу зібраних даних.
MF-7: Формування аналітичних звітів про вплив мікроклімату на продуктивність персоналу.
MF-8: Веб-портал та мобільний додаток для перегляду поточного стану мікроклімату, активності та отримання персоналізованих рекомендацій.
MF-9: Можливість індивідуального налаштування преференцій мікроклімату для окремих робітників.

1.2.3	Припущення та залежності


Припущення:
AS-1: Наявність необхідної інфраструктури (датчики, мережа, серверне обладнання) для розгортання системи.
AS-2: Можливість інтеграції з існуючими системами управління будівлею та обладнанням.
AS-3: Достатня кількість історичних даних для ефективного навчання моделей машинного навчання.
AS-4: Відкритість співробітників до використання системи та надання зворотного зв'язку.

Залежності:
D-1: Функціональність системи залежить від якості та точності датчиків мікроклімату та датчиків активності.
D-2: Ефективність оптимізації залежить від коректного навчання моделей машинного навчання на репрезентативних даних.
D-3: Автоматичне регулювання мікроклімату залежить від можливості інтеграції з системами управління будівлею.
D-4: Прийняття системи користувачами залежить від зручності використання та демонстрації реальних переваг для продуктивності праці.

1.3	Рамки та обмеження проєкту
1.3.1	Рамки первинного випуску


Для кращого опису функціональності програмної системи контролю впливу мікроклімату на активність робітників у першому випуску продукту, поділімо функції на частини, включаючи серверну, IoT, веб-частину та мобільний додаток.
Розпочнемо із функціональності серверної частини:
- Система буде розпізнавати користувачів та надавати їм доступ до відповідних функцій залежно від їхньої ролі (адміністратор, менеджер, співробітник). Для безпеки дані оновлюються кожні 5 годин.
- Система буде вести записи про параметри мікроклімату, активність персоналу, налаштування та статистику. Для надійності дані резервуються щодня.
- Інтерфейс можна буде переключати на різні мови, тим самим користувачі з усього світу зможуть комфортно працювати з системою.
- Дані надійну будуть шифруватися за допомогою популярних методів шифрування.
- Обробка даних та виявлення взаємозв'язків між мікрокліматом та продуктивністю за допомогою алгоритмів машинного навчання.
- Генерація рекомендацій щодо оптимізації параметрів мікроклімату.
- Формування аналітичних звітів про вплив мікроклімату на активність персоналу. Щотижня будуть генеруватися звіти у форматі Excel.
- Адміністрування системи та управління правами доступу.
Функціональність IoT частини:
- Збір даних про параметри мікроклімату (температура, вологість, рівень CO2 тощо) за допомогою датчиків. Ці дані будуть збиратися досить часто кожні 5 хвилин.
- Моніторинг та контроль параметрів мікроклімату в режимі реального часу.
- Передача зібраних даних на сервер для подальшої обробки та аналізу.
- Моніторинг активності співробітників за допомогою мм хвильового радіо датчика.
Веб-частина та мобільний додаток:
- Графічний інтерфейс для авторизації, реєстрації та управління обліковими записами.
- Окремі інтерфейси для різних типів користувачів (адміністратори, керівники, співробітники).
- Локалізація інтерфейсу відповідно до мови та країни.
- Перегляд поточного стану мікроклімату, активності робітників та аналітичних даних з можливістю фільтрації, сортування.
- Налаштування персональних преференцій щодо умов мікроклімату.
- Отримання рекомендацій щодо покращення умов праці.
- Можливість керування параметрами системи (для адміністраторів).


1.3.2	Рамки наступних випусків


Виділимо функції, які планується реалізувати у майбутніх випусках програмної системи контролю впливу мікроклімату:
- Удосконалені алгоритми машинного навчання для більш точного прогнозування взаємозв'язків між мікрокліматом та продуктивністю праці.
- Інтеграція з системами відстеження присутності та активності співробітників (час за комп'ютером, пересування по офісу тощо).
- Можливість встановлення індивідуальних цілей та отримання персоналізованих рекомендацій для кожного працівника.
- Візуалізація результатів у вигляді тепло мап офісних приміщень для швидкого виявлення проблемних зон.
- Розширені аналітичні інструменти для керівництва, включаючи прогнозування продуктивності та моделювання сценаріїв.

1.3.3	Обмеження та винятки


Під час експлуатації системи моніторингу та управління мікрокліматом в офісних приміщеннях можуть виникнути різноманітні винятки та обмеження, які важливо враховувати на етапі проектування та розробки. Розглянемо їх детальніше.
Винятки, пов'язані з мережевою інфраструктурою та живленням:
- Перебої в мережевому з'єднанні або доступі до Інтернету та серверів можуть призвести до тимчасової втрати зв'язку із системою моніторингу та неможливості контролювати мікроклімат дистанційно. Для мінімізації цього ризику слід передбачити резервні канали зв'язку та резервні джерела живлення.
- Нестабільне або переривчасте живлення холодильників, кондиціонерів та іншого обладнання, задіяного в системі, може спричинити втрату даних та збої в роботі. Необхідно забезпечити надійні джерела безперебійного живлення.
Збої в роботі обладнання та датчиків:
- Відмова або пошкодження датчиків температури, вологості та інших параметрів мікроклімату призведе до втрати даних з певних зон моніторингу. Система повинна мати функції самодіагностики та сповіщення про несправності.
- Збої в роботі систем управління будівлею (BMS) унеможливлять автоматичне регулювання мікроклімату та вимагатимуть ручного втручання. Потрібно передбачити механізми інтеграції та резервування.
Обмеження, пов'язані з інтеграцією та сумісністю:
- Система повинна бути сумісною з існуючими BMS, обладнанням різних виробників та протоколами обміну даними. Це вимагає ретельного аналізу та тестування на етапі проектування.
- Бюджетні обмеження можуть вплинути на вибір обладнання, технологій та масштабованість рішення, тому потрібно знайти оптимальний баланс між вартістю та функціональністю.
Обмеження безпеки та конфіденційності:


- Система повинна забезпечувати захист персональних даних співробітників відповідно до вимог законодавства та внутрішніх політик компанії.
- Необхідно передбачити заходи кібербезпеки для захисту від несанкціонованого доступу, витоку даних та кібератак.
Фізичні обмеження приміщень:
- Конструктивні особливості будівлі, розташування робочих зон та перешкоди для поширення сигналів датчиків можуть вплинути на розміщення обладнання та покриття системою.

1.4	Бізнес-контекст
1.4.1	Профілі зацікавлених сторін


Профілі зацікавлених сторін проекту наведені в таблиці 1.1.

Таблиця 1.1 – Профілі зацікавлених сторін проєкту
Зацікавлена сторона	Головна цінність	
Ставлення	Головний інтерес	
Обмеження




Керівництво компанії	


Підвищення продуктивності співробітників	

Сприймає як інструмент для збільшення ефективності	Оптимізація мікроклімат у для створення сприятливих умов праці	Бюджетні обмеження, необхідність швидкого повернення інвестицій





Відділ ІТ	Забезпечення кібербезпеки, інтеграція з існуючою ІТ- інфраструктуро ю	Обмеження існуючої ІТ- інфраструктур и, необхідність навчання персоналу	

Забезпеченн я сумісності з існуючими системами	Обмеження існуючої ІТ- інфраструктур и, необхідність навчання персоналу



Продовження таблиці 1.1.
Зацікавлена сторона	Головна цінність	
Ставлення	Головний інтерес	
Обмеження




Фінансовий відділ	

Оптимізація витрат та економічна ефективність	Бюджетні обмеження, необхідність чітких розрахунків вигод	

Максимальн е повернення інвестицій	Бюджетні обмеження, необхідність чітких розрахунків вигод





Постачальник и обладнання	



Збільшення продажів та прибутку	
Розглядають систему як можливість для просування своїх рішень	Технічні обмеження, вимоги сумісності з їхнім обладнання м	


Технічні обмеження та вимоги сумісності




Співробітник и офісу	

Комфортні умови праці та підвищення продуктивності	

Сприйнятливе, якщо система зручна у використанні	Необхідніст ь навчання та адаптації до нового мікроклімат у	

Необхідність навчання та адаптації до нової системи

1.4.2	Пріоритети проекту


Пріоритети проєкту наведені в таблиці 1.2. 
 
Таблиця 1.2 – Пріоритети проєкту



Показник	


Виконання (етапи)	
Обмеження (граничні значення)	Ступінь свободи (допустимий діапазон)





План робіт	


Версія 1.0 до
01.09.2023, Версія
1.1 до 15.11.2023	
Версія 1.0 - граничний термін 01.09.2023, Версія
1.1 - граничний
термін 15.11.2023	Версія 1.0 – відхилення max 5 днів,
Версія 1.1 – відхилення max 7 днів








Функціональність	У версії 1.0: моніторинг параметрів, аналіз даних, візуалізація. У версії 1.1: управління мікрокліматом, покращення моделі машинного навчання	




Має бути реалізована вся функціональність, визначена для відповідних версій	




90% функцій мають бути включені до випуску 1.0, решта – у 1.1





Якість	Забезпечення високої якості продукту, відповідно до вимог безпеки та надійності	
Проходження 100% тестів на функціональність, безпеку та продуктивність	Допустиме тимчасове невиконання до 5% некритичних тестів


Персонал	Сформувати основну команду до 01.07.2025	Максимальний розмір команди: 4
розробники, 2 тестувальники, 1 аналітик	Допустимо перевищити кількість персоналу на 1-
2 особи




Бюджет	Витратити 65% бюджету на створення версії 1.0, решту на
випуск 1.1	
Не перевищувати загальний запланований бюджет	

Допустиме перевищення бюджету до 8%

1.4.3	Робоче середовище

Бекенд системи буде реалізований з використанням мови програмування Python та фреймворку FastAPI [1-2]. Буде використовуватися математична обробка даних. Дані про параметри мікроклімату, активність співробітників та інша релевантна інформація зберігатиметься у базі даних PostgreSQL.
Фронтенд системи буде створений з використанням JavaScript та бібліотеки React [3-4] для побудови користувацького інтерфейсу. Для забезпечення зручного та інтуїтивного досвіду користувача буде використано css фреймворк Tailwind.
Додатково буде розроблений мобільний додаток для операційної системи Android [5] з використанням мови програмування Kotlin. Це дозволить керівникам дуже легко відстежувати та контролювати мікроклімат свого робочого місця з мобільного пристрою.
Для забезпечення безперебійної роботи та високої доступності системи планується використовувати хмарну інфраструктуру Microsoft Azure.
 
2	ПОСТАНОВКА ЗАДАЧІ


За результатами попереднього аналізу предметної області, задачею проєкту було поставлено створення програмної системи для контролю впливу мікроклімату офісу на активність робітників.
База даних повинна включати інформацію про: користувачів, приміщення, девайси, конфігурації девайсів, вимірювання.
Для менеджера має бути реалізований такий функціонал:
а)	реєстрація та вхід в систему;
б)	перегляд поточних показників мікроклімату у власному робочому просторі;
в)	перегляд історії змін мікроклімату;
г)	встановлення персональних налаштувань комфорту;
ґ)	можливість надсилання запитів на корекцію мікроклімату;
д)	перегляд рекомендацій щодо підвищення продуктивності в залежності від поточних умов.
Для адміністратора системи має бути реалізований такий функціонал:
а)	реєстрація та вхід в систему;
б)	керування користувачами системи;
в)	перегляд, додавання, редагування, видалення датчиків та приміщень;
г)	моніторинг показників мікроклімату в реальному часі для всіх приміщень;
ґ)	налаштування автоматичних правил регулювання мікроклімату;
д)	перегляд аналітики щодо впливу мікроклімату на активність робітників;
е)	експорт та імпорт конфігурацій девайсів;
є)	налаштування інтеграцій з системами клімат-контролю.
Програмна система повинна підтримувати роботу з різними типами датчиків (температури, вологості, рівня CO2) та забезпечувати їх безперебійне підключення через ESP32.
Також програмна система повинна підтримувати локалізацію та інтернаціоналізацію, а саме, забезпечувати: підтримку різних кодових таблиць символів, обчислення та формат дати та часу, локальний та універсальний час, метричні одиниці вимірювання, різні системи вимірювання температури (Цельсій, Фаренгейт), порядок сортування текстових значень, різні напрями введення тексту тощо.
Серверна частина системи має бути реалізована з використанням FastAPI, а клієнтська частина - з використанням React. Система повинна забезпечувати високу продуктивність та надійність при обробці даних в режимі реального часу.
 
3	ПРОЕКТУВАННЯ ПРОГРАМНОГО ПРОЕКТУ
3.1	Проектування серверної частини проекту


Першим кроком було визначення та опис усіх необхідних сутностей системи для реалізації визначеного функціоналу. Для цього була розроблена ER-модель даних, яка візуалізує всі сутності та зв'язки між ними. Після визначення всіх сутностей була створена ER-модель даних (див. рис. Б.1 у додатку Б):
Модель даних включає в себе наступні сутності та поля: 
а) користувач:
1)	користувач_id;
2)	нікнейм;
3)	пошта;
4)	пароль_хешований;
5)	роль;
6)	чи_забанен; 
б) пристрій:
1)	пристрій_id;
2)	mac_адреса;
3)	кімната_id;
в) конфігурація_пристрою:
1)	конфігурація_id;
2)	назва;
3)	пристрій_id;
4)	дані_конфігурації;
г) кімната:
1)	кімната_id;
2)	назва;
д) вимірювання:
1)	вимірювання_id;
2)	пристрій_id;
3)	позначка_часу;
4)	температура;
5)	вологість;
6)	вуглекислий_газ;
7)	продуктивність.

Ці сутності та поля забезпечують все необхідне для реалізації запланованого функціоналу системи. Далі були визначені сценарії використання системи. Функціонал розподілений між трьома акторами: Гість, Менеджер та Адміністратор
Гість має обмежений доступ і може лише переглядати загальну інформацію. Для отримання повного доступу необхідно авторизуватися в системі.
Менеджер може переглядати статистику мікроклімату та продуктивності, керувати кімнатами та пристроями, а також експортувати дані.
Адміністратор має повний доступ до системи, включаючи керування користувачами, конфігурацією пристроїв та всіма даними.
На основі представлених сценаріїв використання була створена UML діаграма прецедентів (див. рис. Б.2 у додатку Б).
Взаємодія між серверною і клієнтською частинами, а також з IoT пристроями, реалізована за допомогою REST API. Це забезпечує гнучку структуру взаємодії та дозволяє легко масштабувати систему.
Таким чином, в результаті концептуального моделювання предметної області, були визначені основні сутності програмної системи, їх атрибути, та створені ER-модель та діаграма прецедентів, які відображають структуру та функціональність системи контролю впливу мікроклімату офісу на активність робітників.
Спілкування між серверною і клієнтською частинами, а також з мобільним додатком та IoT, реалізоване за допомогою REST API. Цей тип спілкування забезпечує загальну структуру взаємодії та дозволяє легко додавати різні компоненти системи. Більш детальна інформація про взаємодію різних частин системи може бути представлена на UML-діаграмі розгортання (див. рис. 3.1).

 
Рисунок 3.1 – Діаграма розгортання (Deployment Diagram)

Для демонстрації основного функціоналу, а саме моніторингу мікроклімату та його впливу на продуктивність працівників, була розроблена діаграма активності (див. рис. 3.2). Вона відображає головні дії та етапи, які здійснюють менеджери та адміністратори системи для досягнення мети. 

 
Рис. 3.2 – UML діаграма активності

Розглянемо діаграму активності (Activity diagram), зображену на рисунку 3.3. В даній діаграмі відображений алгоритм роботи створення та відображення інформації про рослину та відправки повідомлень на пошту при створенні компанії.

3.2	Проектування IoT-частини системи

IoT частина розробленого проекту взаємодіє з фізичним середовищем офісу, вимірюючи параметри мікроклімату. Пристрої вимірюють температуру, вологість, рівень CO2 та інші показники, після чого відправляють дані на сервер. Ці дані потім аналізуються системою та надаються менеджерам для оцінки впливу на продуктивність працівників. Ця взаємодія представлена на діаграмі прецедентів (див. рис. 3.3).
 
Рисунок 3.3 – UML діаграма прецедентів IoT частини системи

За допомогою даної діаграми були окреслені функціональні вимоги до IoT частини проекту.

3.3	Проектування клієнтської частини проекту


Системою користуються три типи акторів: гість, менеджер та адміністратор. Під час першого використання система дозволяє гостю лише переглядати загальну інформацію про мікроклімат офісу. Для доступу до розширеного функціоналу гість повинен авторизуватися в системі.
Менеджер може переглядати детальну статистику мікроклімату, керувати налаштуваннями кімнат та пристроїв, а також аналізувати вплив 
мікроклімату на продуктивність працівників. Адміністратор має повний доступ до функціоналу та інформації в системі, включаючи керування користувачами, конфігурацією пристроїв, а також може експортувати дані та створювати резервні копії бази даних.
Для демонстрації вищезазначених сценаріїв була створена UML діаграма прецедентів (див. рис. Б.2 у додатку Б).
Загалом клієнтська частина складається наступних компонентів:
а)	Реєстрація:
1)	Адміністратор може зареєструвати користувача в системі.
2)	Адміністратор вводить дані, такі як електронна пошта та пароль.
б)	Вхід.
1)	Користувачі автентифікуються в системі, вводячи свої облікові дані.
Програмна система складається з наступних ключових компонентів та функціональності:
в)	Функціонал для менеджера:
1)	Перегляд детальної статистики мікроклімату.
2)	Керування конфігурацією пристроїв.
3)	Експорт, імпорт та редагування конфігурацій.
4)	Керування налаштуваннями кімнат.
5)	Аналіз впливу мікроклімату на продуктивність.
6)	Налаштування параметрів мікроклімату.
7)	Моніторинг показників у реальному часі.
г)	Функціонал для адміністратора:
1)	Усі можливості менеджера.
2)	Керування користувачами системи.
3)	Реєстрація нових користувачів.
4)	Налаштування прав доступу зображення, назву та опис.
5)	Керування пристроями.
6)	Створення резервних копій даних.
Пройдемося по кожному пункту. На рисунку 3.4 наведено головну сторінку.
 
Рисунок 3.4 – головна сторінка
Форма авторизації (див. рис. 3.5) містить такі елементи:
а)	Заголовок "Вхід в систему" вгорі форми.
б)	Поле введення "Логін" для вказання ідентифікатора користувача.
в)	Поле введення "Пароль" для вводу секретного пароля. Символи в цьому полі приховані для безпеки.
г)	Кнопка "Увійти" синього кольору для підтвердження введених даних та входу в систему.
Ця форма дозволяє користувачам безпечно автентифікуватися та отримати доступ до системи, ввівши свої облікові дані.
 
Рисунок 3.5 – форма входу на сайт
Форма зміни пароля (див. рис. 3.6) в системі EcoSystem має такий вигляд:
Вгорі форми розташований заголовок "Аккаунт: pylal", де вказано ім'я поточного користувача.
Нижче розміщені два поля для введення:
а)	"Новий пароль" - для введення бажаного нового пароля.
б)	"Підтвердження пароля" - для повторного введення нового пароля задля уникнення помилок.
Під полями введення знаходиться синя кнопка "Змінити пароль". Натискання на цю кнопку підтверджує зміну пароля після заповнення обох полів.
 
Рисунок 3.6 – форма зміни паролю
Сторінка "Кімнати" (див. рис. 3.7) в системі EcoSystem має такий вигляд:
а)	Вгорі сторінки розміщено заголовок "Кімнати". Праворуч від нього знаходяться дві кнопки: синя "Додати кімнату" та рожева "Експорт".
б)	Нижче представлений список кімнат. У прикладі видно одну кімнату з назвою "Друга". Поруч з назвою кімнати є іконка редагування.
в)	Під назвою кімнати розташоване посилання "Перейти до кімнати", яке дозволяє користувачеві перейти до детальної інформації про вибрану кімнату.
г)	Ліворуч знаходиться бокове меню з пунктами навігації системи, включаючи "Аккаунт", "Кімнати", "Пристрої" та "Користувачі".
Ця сторінка дозволяє користувачам переглядати список кімнат, додавати нові, редагувати існуючі та експортувати дані про кімнати. Інтерфейс простий та інтуїтивно зрозумілий, що забезпечує зручне керування інформацією про кімнати в системі EcoSystem.
 
Рисунок 3.7 – сторінка з кімнатами
	Сторінка конкретної кімнати (див. рис. 3.8) в системі EcoSystem має такий вигляд:
	а)	Поточний рівень продуктивності.
	б)	Рекомендації:
1) Рекомендується зменшити рівень CO2 ближче до [рекомендований рівень CO2] ppm.
2) Рекомендується знизити вологість ближче до [рекомендований рівень вологості] %.
3) Ваша продуктивність може бути занадто низькою, близько [рівень продуктивності у відсотках] %.
	в)	Пристрої та вимірювання.
	г)	Фільтр дат.
	ґ)	Кнопка для отримання статистики.

 
Рисунок 3.8 – сторінка з інформацією про кімнату
Форма додавання пристроїв (див. рис. 3.9) призначена для додавання пристроїв у певну кімнату. Ось опис її елементів:
а)	Поле для введення назви кімнати.
б)	Розділ "Додавання пристроїв":
1) Поле для введення MAC-адреси пристрою.
2) Іконка кошика для видалення введеної адреси.
в)	Кнопка "+ ДОДАТИ ПРИСТРІЙ" для додавання інших пристроїв.
г)	Внизу форми розташована синя кнопка "СТВОРИТИ КІМНАТУ ТА ПРИСТРОЇ" для завершення процесу та збереження введених даних.
Ця форма дозволяє користувачу створити нову кімнату, дати їй назву та додати до неї один або кілька пристроїв, вказавши їхні MAC-адреси..
 
Рисунок 3.9 – форма додавання пристроїв
Форма редагування конфігурації пристроїв (див. рис. 3.10) призначена для редагування конфігурації пристрою. Вона містить наступні елементи:
а)	Заголовок "Редагування конфігурації пристрою".
б)	Розділ "ideal_values" (ідеальні значення).
в)	Розділ "min_values" (мінімальні значення).
г)	Розділ "max_values" (максимальні значення).
ґ)	Розділ "monitoring_settings" (налаштування моніторингу).
д)	Внизу форми розташовані дві кнопки:
1) "ВІДМІНИТИ" - для скасування змін.
2) "ЗБЕРЕГТИ" - для збереження внесених змін.
	Форма дозволяє користувачеві налаштувати ідеальні, мінімальні та максимальні значення для температури, вологості та рівня CO2 для конкретного пристрою.
 
Рисунок 3.10 – Форма редагування конфігурації пристроїв
Сторінка зі статистикою пристроїв (див. рис. 3.11) містить статистичні дані для пристроїв. Опис структури сторінки зі статистикою:
а)	Верхня частина:
1) Поля для вибору дат (початкова та кінцева дата).
2) Кнопка для отримання статистики.
б)	Основний контент:
1) Розділений на дві колонки, кожна для окремого пристрою.
2) Заголовок кожної колонки вказує на конкретний пристрій.
в)	Для кожного пристрою представлено 4 стовпчикові діаграми:
1) CO2.
2) Температура.
3) Вологість.
4) Продуктивність.
Ця сторінка дозволяє користувачам порівнювати статистику та тренди для різних пристроїв та показників в єдиному інтерфейсі.
 
Рисунок 3.11 – сторінка зі статистикою
Сторінка управління користувачами (див. рис. 3.12) містить дані про користувачів та можливість модерації користувачів. Опис структури сторінки управління користувачами:
а)	Панель пошуку.
б)	Таблиця користувачів.
в)	Кнопка реєстрації користувача.
 
Рисунок 3.12 – сторінка управління користувачами
 
4	РЕАЛІЗАЦІЯ ПРОГРАМНОЇ СИСТЕМИ
4.1 Архітектура та розробка серверної частини

Для розробки серверної частини системи контролю мікроклімату офісу було обрано фреймворк Fast API. Цей вибір зумовлений високою продуктивністю Fast API, його сучасним підходом до створення API та вбудованою підтримкою асинхронного програмування. Fast API забезпечує швидку розробку RESTful веб-сервісів з автоматичною валідацією даних та генерацією документації API.
Система побудована на основі архітектури REST (Representational State Transfer). Ця архітектура забезпечує чітке розділення відповідальності між клієнтом та сервером, що полегшує розробку, тестування та масштабування системи. У контексті системи контролю мікроклімату, це дозволяє ефективно обробляти запити від різних клієнтів (наприклад, датчиків мікроклімату та інтерфейсів користувача) та надавати відповідні дані про стан офісного середовища та активність працівників.
Для зберігання даних було обрано PostgreSQL. Ця потужна реляційна база даних забезпечує надійне зберігання інформації про параметри мікроклімату, активність працівників та інші релевантні дані. PostgreSQL надає широкі можливості для складних запитів та аналізу даних, що критично важливо для системи моніторингу мікроклімату та продуктивності.
Проєкт має наступну структуру:
а) 	Каталог models:
1) Файл deviceconfig.py, який описує сутність моделі конфігурації девайсу;
2) Файл esp.py, який описує сутність моделі девайсу;
3) Файл measurement.py, який описує сутність моделі вимірювання;
4) Файл room.py, який описує сутність моделі кімнати;
5) Файл user.py, який описує сутність моделі користувача;
б)	Каталог routers:
	1) Файл administration_router.py, де описуються ендпоінти, 
які доступні адміністратору;
2) Файл analytics_router.py, де описуються ендпоінти, 
які призначені для вимірювання;
3) Файл auth_router.py, де описуються ендпоінти, 
які призначені для авторизації.
Специфікація REST API та функцій які взаємодіють з веб-сервісами наведена нижче в таблиці 4.1.

Таблиця 4.1 - Специфікація REST API серверної частини системи
Сутність	Метод	Посилання	Дія
Авторизація	POST	/auth/register	Реєстрація нового користувача
		/auth/login	Увійти до системи
	GET	/auth/me	Отримати інформацію про поточного користувача
	PUT	/auth/password	Змінити пароль користувача
Аналітика	POST	/analytics/predict	Передбачити продуктивність, записати дані про стан навколишнього середовища
Продовження таблиці 4.1
Сутність	Метод	Посилання	Дія
Аналітика	POST
	/analytics/statistics/all	Отримати загальну статистику за вказаний період
		/analytics/statistics/room	Отримати статистику по конкретній кімнаті за вказаний період
	 GET	/rooms/{room_id}/latest_data	Отримує останні дані про середню продуктивність з кожної теплової зони офісу, дані датчиків і рекомендації
Адміністрування	POST
	/admin/rooms	Створити нову кімнату
		/admin/devices	Створити новий пристрій
		/admin/config/import	Імпортувати конфігурацію
		/admin/ban/{username}	Заблокувати користувача
		/admin/unban/{username}	Розблокувати користувача
Продовження таблиці 4.1
Сутність	Метод	Посилання	Дія
Адміністрування
	POST	/admin/change_role	Змінити роль користувача
	DELETE	/admin/rooms/{room_id}	Видалити кімнату
		/admin/devices/{mac_address}	Видалити пристрій
	GET	/admin/devices/{mac_address}	Отримати інформацію про пристрій
		/admin/devices	Отримати список всіх пристроїв
		/admin/rooms	Отримати список всіх кімнат
		/admin/rooms/{room_id}/devices	Отримати список пристроїв у кімнаті
		/admin/config/export	Експортувати конфігурацію


Продовження таблиці 4.1
Сутність	Метод	Посилання	Дія
Адміністрування	GET	/admin/device/config	Експортувати конфігурацію пристрою
		/admin/measurements/export	Експортувати вимірювання
		/admin/users	Отримати список всіх користувачів
	PUT	/admin/config/{device_id}	Оновити параметр конфігурації пристрою


4.1.1	Розробка API для керування кімнатами


Основна мета маршруту /admin/rooms (див. рядок 1 розділ А.1 у додатку А) - це забезпечення можливості створення та управління кімнатами в системі, що є важливою частиною бізнес-логіки для контролю мікроклімату офісу. 
При отриманні POST-запиту на /admin/rooms, метод create_room виконує наступні дії:
а) 	перевіряє авторизацію користувача (повинен бути адміністратором);
б) 	отримує дані про нову кімнату з тіла запиту;
в) 	створює нову кімнату в базі даних через room_service.create_room;
г)	повертає інформацію про створену кімнату, включаючи її ідентифікатор, назву та список пов'язаних пристроїв.
У разі виникнення помилок, метод обробляє їх та повертає відповідний HTTP-статус з описом помилки.
Цей маршрут також підтримує GET-запити для отримання списку всіх кімнат та DELETE-запити для видалення кімнати за її ідентифікатором.


4.1.2	Розробка API для управління пристроями системи


Маршрут /admin/devices (див. рядок 1 розділ А.2 у додатку А) відповідає за створення та управління пристроями в системі, що є ключовим аспектом для моніторингу мікроклімату.
При отриманні POST-запиту на /admin/devices, метод create_device виконує такі дії:
а) 	перевіряє авторизацію користувача (повинен бути адміністратором);
б) 	отримує дані про новий пристрій з тіла запиту;
в) 	створює новий пристрій у базі даних через device_service.create_device;
г) 	повертає повідомлення про успішне створення пристрою.
Цей маршрут також підтримує GET-запити для отримання інформації про конкретний пристрій за його MAC-адресою та DELETE-запити для видалення пристрою.

4.1.3	Розробка API для керування конфігураціями пристроїв


Маршрути /admin/config/import та /admin/config/export (див. рядок 1 розділ А.3 у додатку А) забезпечують функціональність для імпорту та експорту конфігурацій пристроїв, що є важливим для налаштування та резервного копіювання системи.
При отриманні POST-запиту на /admin/config/import, метод import_config виконує наступні дії:
а) 	перевіряє авторизацію користувача (повинен бути менеджером або адміністратором);
б) 	отримує файл конфігурації та опціональний ідентифікатор пристрою;
в) 	зчитує вміст файлу та перетворює його з JSON;
г) 	імпортує конфігурацію через config_service.import_config;
ґ) 	повертає повідомлення про кількість успішно імпортованих конфігурацій.
При отриманні GET-запиту на /admin/config/export, метод export_config виконує такі дії:
а) 	перевіряє авторизацію користувача (повинен бути менеджером або адміністратором);
б) 	отримує опціональний ідентифікатор пристрою;
в) 	експортує конфігурацію через config_service.export_config;
г) 	формує файл JSON з експортованими даними та повертає його як відповідь для завантаження.



4.2 Архітектура та розробка IoT частини


Для реалізації функціональностей IoT частини системи використано мову програмування Python. Програма взаємодіє з сервером за допомогою бібліотеки requests і використовує протокол HTTP для обміну даними.
Збір даних про мікроклімат реалізований за допомогою симуляторів датчиків:
а) 	DHT22Simulator для вимірювання температури та вологості;
б) 	MHZ19Simulator для вимірювання рівня CO2.
Програма з'єднується з сервером та отримує конфігурацію за допомогою класу ServerCommunicator.
Надсилання даних реалізоване за допомогою HTTP POST-запиту, де дані формуються у форматі JSON. Відправляються дані про температуру, вологість та рівень CO2. Використання JSON формату дозволяє структуровано представляти дані та забезпечує зручний обмін інформацією між IoT пристроєм і сервером.
Оптимізація коду здійснена для роботи на пристроях з обмеженою потужністю, забезпечуючи можливість легкого портування програми на реальні IoT пристрої. Використання бібліотеки requests у сполученні з мовою Python дозволяє досягти ефективної взаємодії та оптимального використання ресурсів пристрою для передачі даних на сервер.
Система складається з наступних ключових компонентів:
а) 	DHT22Simulator: симулює роботу датчика температури та вологості;
б)	MHZ19Simulator: симулює роботу датчика CO2 з можливістю зчитування даних через UART та PWM інтерфейси;
в)	ServerCommunicator: забезпечує комунікацію з сервером, отримання конфігурації та відправку даних;
г)	DeviceConfig: структура даних для зберігання конфігурації пристрою.
Для повного розуміння використаних технологій була створена діаграма пакетів (див. рис. 4.1).

 
Рисунок 4.1 - UML діаграма пакетів для IoT частини системи

Для демонстрації взаємодії пристрою з користувачем системи більш детально було розроблено діаграму взаємодії (див. додат. Б.3). Окрім цього, на основі взаємодії пристрою було побудовано діаграму діяльності де можно побачити взаємодію пристрою з сервером (див. додат. Б.4).


4.3 Архітектура та розробка web частини

Вибір технологій для цього проекту базувався на функціональних вимогах та особистих навичках розробників. Для реалізації веб-інтерфейсу було обрано React з JavaScript, оскільки ці інструменти забезпечують високу продуктивність і ефективність системи. Для роботи з формами та управління станом використовуються стандартні React хуки, як-от useState та useEffect, що спрощує процес керування станом та розробку логіки додатка. Axios використовується для здійснення HTTP-запитів до сервера, забезпечуючи зручну роботу з API.
Проект побудований за архітектурним стилем SPA (Single Page Application), який передбачає взаємодію з користувачем через динамічне оновлення поточної веб-сторінки без потреби завантажувати нові сторінки з сервера. Це забезпечує швидший і більш інтерактивний користувацький досвід, оскільки більшість логіки додатка виконується на стороні клієнта в браузері, а сервер обробляє лише запити, пов'язані з даними.
Для детального відображення структури веб-інтерфейсу проекту було створено діаграму компонентів (див. рис. 4.2).

 
Рисунок 4.2 - UML діаграма компонентів веб-клієнту системи

В контексті демнострації поведінки системи та її станів, було створено і представлено діаграму станів (див. рис. 4.3). На цій діаграмі відображені різні стани користувача, включаючи неавторизований, авторизований, активний, а також інші стани, через які проходить користувач під час роботи в системі.

 
Рисунок 4.3 - UML діаграма станів веб-клієнту системи

Для наочного показу всіх можливих дій користувача в системі була створена діаграма діяльності (див. рис. 4.4). На цій діаграмі детально відображено, які дії доступні користувачеві та які етапи необхідно пройти для їх виконання.

 
Рисунок 4.4 - UML діаграма діяльності веб-клієнту системи
 
ВИСНОВКИ


В рамках курсового проекту було проведено концептуальне моделювання та поглиблений аналіз предметної області контролю впливу мікроклімату офісу на активність робітників. На основі цього аналізу була розроблена програмна система для підвищення ефективності управління мікрокліматом та надання інструментів адміністраторам та користувачам для моніторингу та оптимізації умов праці.
Розробка включала в себе створення концептуальної моделі всіх частин системи, яка дозволила нам краще зрозуміти потреби користувачів та визначити основні вимоги до неї. Була розроблена фізична модель даних. Серверна частина була реалізована на платформі Python з використанням FastAPI для створення високопродуктивного веб-сервісу RESTful. База даних реалізована на PostgreSQL для забезпечення високої продуктивності і надійності зберігання даних. На стороні клієнта була використана бібліотека React для забезпечення динамічного та інтерактивного інтерфейсу користувача. Код для IoT пристроїв, що вимірюють параметри мікроклімату, був написаний на MicroPython для ESP32.
В результаті проведеної роботи була створена програмна система контролю впливу мікроклімату офісу на активність робітників, яка надає користувачам інструменти для ефективного управління мікрокліматом, забезпечує зручний доступ до статистики та аналітики, відстежує параметри навколишнього середовища в режимі реального часу і автоматизує процес оптимізації умов праці. Система також дозволяє створювати резервні копії баз даних для забезпечення безпеки та відновлення даних.
В цілому, розроблена система контролю мікроклімату офісу є зручним інструментом для адміністраторів, менеджерів та звичайних користувачів, які працюють в офісі. Вона не тільки забезпечує простоту і ефективність управління мікрокліматом, але і спрощує процес аналізу впливу умов праці на продуктивність робітників, що дозволяє приймати обґрунтовані рішення щодо оптимізації робочого середовища.
 
ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ


1.	FastAPI documentation / FastAPI. URL: https://fastapi.tiangolo.com (дата звернення: 27.06.2024).
2.	FastAPI Tutorial - User Guide / FastAPI. URL: https://fastapi.tiangolo.com/tutorial/ (дата звернення: 27.06.2024).
3.	React Documentation / Facebook Inc. URL: https://react.dev/learn (дата звернення: 27.06.2024).
4. React API Reference / Facebook Inc. URL: https://react.dev/reference/react (дата звернення: 27.06.2024).
5. Android Studio / Google LLC. URL: https://developer.android.com/studio (дата звернення: 27.06.2024).
 
ДОДАТОК А
Код програми


А.1 Створення та управління кімнатами

1@administration_router.post("/rooms", response_model=RoomRead)
2  def create_room(
3          room: RoomCreate,
4          db: Session = Depends(get_db),
5          current_user: User = Depends(get_current_admin)):
6      try:
7          new_room = room_service.create_room(db, room)
8          return RoomRead(
9              id=new_room.id,
10             name=new_room.name,
11             devices=[DeviceRead(id=d.id, mac_address=d.mac_address) for d in new_room.devices]
12         )
13     except HTTPException as e:
14         raise e
15     except Exception as e:
16         raise HTTPException(status_code=500, detail=str(e))
17 
18 @administration_router.delete("/rooms/{room_id}")
19 def delete_room(
20         room_id: int,
21         db: Session = Depends(get_db),
22         current_user: User = Depends(get_current_admin)):
23     try:
24         room_service.delete_room(db, room_id)
25     except ValueError as e:
26         raise HTTPException(status_code=404, detail=str(e))
27     return {"message": "Кімната видалена успішно"}
28 
29 @administration_router.get("/rooms", response_model=List[RoomRead])
30 def get_all_rooms(
31         db: Session = Depends(get_db),
32         current_user: User = Depends(get_current_manager_or_admin)
33 ):
34     return room_service.get_all_rooms(db)
35 
36 @administration_router.get("/rooms/{room_id}/devices", response_model=List[DeviceRead])
37 def get_room_devices(
38         room_id: int,
39         db: Session = Depends(get_db),
40         current_user: User = Depends(get_current_manager_or_admin)):
41     return room_service.get_room_devices(db, room_id)

А.2 Управління пристроями


1@administration_router.post("/devices")
2  def create_device(device: DeviceCreate,
3                    db: Session = Depends(get_db),
4                    current_user: User = Depends(get_current_admin)):
5      try:
6          device_service.create_device(db, device)
7      except ValueError as e:
8          raise HTTPException(status_code=400, detail=str(e))
9      return {"message": "Пристрій створений успішно"}
10 
11 @administration_router.delete("/devices/{mac_address}")
12 def delete_device(mac_address: str,
13                   db: Session = Depends(get_db),
14                   current_user: User = Depends(get_current_admin)):
15     try:
16         device_service.delete_device_by_mac(db, mac_address)
17     except ValueError as e:
18         raise HTTPException(status_code=404, detail=str(e))
19     return {"message": "Пристрій видалений успішно"}
20 
21 @administration_router.get("/devices/{mac_address}")
22 def get_device(
23         mac_address: str,
24         db: Session = Depends(get_db),
25         current_user: User = Depends(get_current_admin)):
26     try:
27         return device_service.get_device_by_mac(db, mac_address)
28     except ValueError as e:
29         raise HTTPException(status_code=404, detail=str(e))
30 
31 @administration_router.get("/devices", response_model=List[DeviceRead])
32 def get_all_devices(
33         db: Session = Depends(get_db),
34         current_user: User = Depends(get_current_manager_or_admin)
35 ):
36     try:
37         return device_service.get_all_devices(db)
38     except ValueError as e:
39         raise HTTPException(status_code=404, detail=str(e))

А.3 Управління пристроями

1@administration_router.post("/config/import")
2  async def import_config(
3          file: UploadFile = File(...),
4          device_id: Optional[int] = Query(None, description="ID пристрою для імпорту конфігурації"),
5          db: Session = Depends(get_db),
6          current_user: User = Depends(get_current_manager_or_admin)
7  ):
8      content = await file.read()
9      try:
10         data = json.loads(content)
11         result = config_service.import_config(db, data, device_id)
12         return {"message": f"Успішно імпортовано {result} конфігурацій"}
13     except json.JSONDecodeError:
14         raise HTTPException(status_code=400, detail="Некоректний формат JSON")
15     except ValueError as e:
16         raise HTTPException(status_code=400, detail=str(e))
17     except Exception as e:
18         raise HTTPException(status_code=500, detail=f"Внутрішня помилка сервера: {str(e)}")
19 
20 @administration_router.get("/config/export")
21 def export_config(
22         db: Session = Depends(get_db),
23         device_id: Optional[int] = Query(None, description="ID пристрою для експорту конфігурації"),
24         current_user: User = Depends(get_current_manager_or_admin)
25 ):
26     config_data = config_service.export_config(db, device_id)
27     if not config_data:
28         raise HTTPException(status_code=404, detail="Конфігурацію не знайдено")
29 
30     timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
31     filename = f"config_export_{timestamp}.json"
32     if device_id:
33         filename = f"config_device_{device_id}_{timestamp}.json"
34 
35     return Response(
36         content=json.dumps(config_data, cls=CustomJSONEncoder, indent=2, ensure_ascii=False),
37         media_type="application/json",
38         headers={"Content-Disposition": f"attachment; filename={filename}"}
39     )
 
ДОДАТОК Б
Діаграми

 
Рисунок Б.1 – ER модель даних

 
Рисунок Б.2 - UML діаграма прецедентів

 
Рисунок Б.3 – Діаграма взаємодії для IoT частини системи

 
Рисунок Б.4 - Діаграма діяльності для IoT частини системи
